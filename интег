#include <iostream>
#include <cmath>
#include <iomanip>
#include <limits>

using namespace std;

// Функция для вычисления интеграла методом Симпсона
double simpson_integral(double (*f)(double), double a, double b, int n = 1000) {
    if (n % 2 != 0) {
        n++; // Делаем n четным
    }
    
    double h = (b - a) / n;
    double sum = f(a) + f(b);
    
    for (int i = 1; i < n; i++) {
        double x = a + i * h;
        sum += (i % 2 == 0) ? 2 * f(x) : 4 * f(x);
    }
    
    return (h / 3) * sum;
}

// Подынтегральные функции
double integral_1(double x) { return x * exp(-x); }
double integral_2(double x) { return exp(-x) * sin(2*x); }
double integral_4(double x) { return x * exp(-x); }
double integral_6(double x) { return 1 / ((1 + x) * sqrt(x)); }
double integral_7(double x) { return pow(x, 3) / sqrt(4 - pow(x, 2)); }
double integral_8(double x) { return log(x) / pow(x, 2); }
double integral_9(double x, double a = 1, double b = 1) { return exp(-a*x) * cos(b*x); }
double integral_10(double x) { return 1 / (pow(x, 2) - 4*x + 3); }

int main() {
    const double inf_approx = 1000.0; // Приближение бесконечности
    const double eps = 1e-10; // Малое число для избегания особых точек
    
    cout << fixed << setprecision(6);
    
    // Вычисление интегралов
    cout << "1) ∫[0,1] x*e^(-x) dx ≈ " 
         << simpson_integral(integral_1, 0, 1) << endl;
    
    cout << "2) ∫[0,∞] e^(-x)*sin(2x) dx ≈ " 
         << simpson_integral(integral_2, 0, inf_approx) << endl;
    
    cout << "4) ∫[0,∞] x*e^(-x) dx ≈ " 
         << simpson_integral(integral_4, 0, inf_approx) << endl;
    
    cout << "6) ∫[0,∞] 1/((1+x)*√x) dx ≈ " 
         << simpson_integral(integral_6, eps, inf_approx) << endl;
    
    cout << "7) ∫[0,1] x^3/√(4-x^2) dx ≈ " 
         << simpson_integral(integral_7, 0, 1 - eps) << endl;
    
    cout << "8) ∫[0,∞] ln(x)/x^2 dx ≈ " 
         << simpson_integral(integral_8, eps, inf_approx) << endl;
    
    // Для интеграла 9 создаем лямбда-функцию с параметрами a=1, b=1
    auto f9 = [](double x) { return integral_9(x, 1, 1); };
    cout << "9) ∫[0,∞] e^(-a*x)*cos(b*x) dx (a=1,b=1) ≈ " 
         << simpson_integral(f9, 0, inf_approx) << endl;
    
    cout << "10) ∫[0,1] 1/(x^2-4x+3) dx ≈ " 
         << simpson_integral(integral_10, 0, 1 - eps) << endl;
    
    cout << "\nПримечание:\n";
    cout << "3) Интеграл расходится\n";
    cout << "5) Интеграл расходится (подынтегральная функция не определена на всем интервале)\n";
    
    return 0;
}
