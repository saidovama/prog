#include <iostream>
#include <cmath>
#include <functional>

double simpson_rule(std::function<double(double)> func, double a, double b, int &nseg) {
    if (nseg % 2 == 1) {
        nseg += 1; // Увеличиваем количество сегментов до четного
    }
    
    double dx = (b - a) / nseg;
    double sum = (func(a) + 4 * func(a + dx) + func(b));
    nseg /= 2; // Делим количество сегментов на 2 для дальнейшего вычисления

    for (int i = 1; i < nseg; i++) {
        sum += 2 * func(a + (2 * i) * dx) + 4 * func(a + (2 * i + 1) * dx);
    }

    return sum * dx / 3;
}

double func(double x) {
    return (x == 0) ? 1.0 : sin(x) / x; // Обработка x = 0
}

int main() {
    std::cout << "Используем метод Симпсона" << std::endl;
    std::cout << "Интегрируемая функция: f(x) - sin(x) / x" << std::endl;

    double a = 1; // Левый край отрезка интегрирования
    double b = 10; // Правый край отрезка интегрирования
    int nseg = 2; // Начальное количество сегментов
    double eps = 1e-7; // Точность

    std::cout << "a = " << a << ", b = " << b << ", eps = " << eps << std::endl;

    double int_1 = simpson_rule(func, a, b, nseg);
    nseg *= 2;
    double int_2 = simpson_rule(func, a, b, nseg);

    while (std::abs(int_1 - int_2) > eps) {
        nseg *= 2;
        int_1 = simpson_rule(func, a, b, nseg);
        nseg *= 2;
        int_2 = simpson_rule(func, a, b, nseg);
    }

    std::cout << "\nРезультат: I = " << int_2 << ", Количество разбиений: " << nseg << std::endl;

    return 0;
}
